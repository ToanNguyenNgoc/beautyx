{"version":3,"file":"static/js/674.ca33fa60.chunk.js","mappings":"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","sources":["pages/ResetPassword/components/FormTelephone.tsx","pages/ResetPassword/components/DialogNotification.tsx","pages/ResetPassword/components/FormOtp.tsx","pages/ResetPassword/components/FormHead.tsx","pages/ResetPassword/index.tsx"],"sourcesContent":["import React, { useContext } from 'react';\nimport { useFormik } from 'formik'\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom'\nimport { AppContext } from 'context/AppProvider';\nimport icon from 'constants/icon';\n\n\nfunction FormTelephone(props: any) {\n    const { t } = useContext(AppContext);\n    const { handlePostTelephone, title, load, isDialog, setActiveTabSign, prevUrl } = props;\n    const history = useHistory();\n    const formikTelephone = useFormik({\n        initialValues: {\n            telephone: \"\",\n        },\n        validationSchema: Yup.object({\n            telephone: Yup.string()\n                .required(t(\"form.please_enter_your_phone\")),\n        }),\n        onSubmit: (values) => {\n            values = {\n                ...values,\n                telephone: values.telephone.cleanString()\n            };\n            handlePostTelephone(values.telephone, true)\n        },\n    });\n    const onBack = () => {\n        if (setActiveTabSign) return setActiveTabSign(1)\n        if(prevUrl) return history.replace(prevUrl)\n        history.goBack()\n    }\n    return (\n        <>\n            <div id=\"recaptcha-container\" ></div>\n            <div className=\"flex-row-sp for-pass-cnt__phone-head\">\n                {\n                    !isDialog\n                    &&\n                    <button\n                        onClick={onBack}\n                    >\n                        <img src={icon.chevronLeft} alt=\"\" />\n                    </button>\n                }\n                <span>{title ? title : t(\"form.reset_password\")}</span>\n                <div></div>\n            </div>\n            <form\n                autoComplete='off'\n                className=\"flex-column for-pass-phone\"\n                onSubmit={formikTelephone.handleSubmit}\n            >\n                <input\n                    name=\"telephone\"\n                    value={formikTelephone.values.telephone}\n                    onChange={formikTelephone.handleChange}\n                    type=\"text\"\n                    className=\"for-pass-cnt__phone-ip\"\n                    placeholder={t(\"pm.phone_number\")}\n                    autoFocus\n                />\n                {\n                    formikTelephone.errors.telephone && formikTelephone.touched.telephone &&\n                    <span className=\"for-pass-cnt__phone-err\">\n                        {formikTelephone.errors.telephone}\n                    </span>\n                }\n                <button\n                    className='for-pass-cnt__btn'\n                    type='submit'\n                >\n                    {load ? t(\"form.sending\") : t(\"form.continue\")}\n                </button>\n            </form>\n        </>\n    );\n}\n\nexport default FormTelephone;","import React from 'react';\nimport { Dialog } from '@mui/material';\nimport { useHistory } from 'react-router-dom'\n\n\nfunction DialogNotification(props: any) {\n    const { errorCode, setErrorCode } = props;\n    const history = useHistory();\n    const onBackSignIn = () => {\n        history.replace({\n            pathname: \"/sign-in\",\n            search: \"1\",\n        });\n    }\n    const onCheck = () => {\n        switch (errorCode.code) {\n            case 200:\n                return <div>\n                    <div className=\"flex-column for-er-no\">\n                        Trang web sẽ đưa bạn về trang đăng nhập\n                        <span onClick={onBackSignIn} >Trở về đăng nhập</span>\n                    </div>\n                </div>\n            case 400:\n                return <div className=\"for-er-no\">\n                    {errorCode.title}\n                </div>\n            default:\n                break\n        }\n    }\n    return (\n        <Dialog\n            open={errorCode.open}\n            onClose={() => setErrorCode({ ...errorCode, open: false })}\n        >\n            <div className=\"flex-column dia-no-cnt\">\n                <span className='dia-no-cnt__head' >\n                    Thông báo\n                </span>\n                {onCheck()}\n            </div>\n        </Dialog>\n    );\n}\n\nexport default DialogNotification;","import React, { useContext, useState, useEffect } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup'\nimport authentication from '../../../api/authApi';\nimport { AxiosError } from \"axios\";\nimport DialogNotification from './DialogNotification';\nimport icon from '../../../constants/icon';\nimport { CircularProgress } from \"@mui/material\";\nimport { AppContext } from '../../../context/AppProvider';\n\nfunction FormOtp(props: any) {\n    const { t } = useContext(AppContext);\n    const {\n        data,\n        handlePostTelephone,\n        setStep\n    } = props;\n    const [errorCode, setErrorCode] = useState({\n        code: 0,\n        open: false,\n        title: '',\n        loading: false\n    })\n    const [sec, setSec] = useState(90);\n    useEffect(() => {\n        const timeSec = setInterval(() => {\n            if (sec > 0) {\n                setSec(prevState => prevState - 1)\n            }\n        }, 1000)\n        return () => clearInterval(timeSec)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sec])\n\n    const handleOnResetPassword = async (params: any) => {\n        setErrorCode({ ...errorCode, loading: true })\n        try {\n            await authentication.forgotPassword(params)\n            setErrorCode({\n                code: 200,\n                open: true,\n                title: t(\"form.change_password_successfully\"),\n                loading: false\n            })\n        } catch (error) {\n            const err = error as AxiosError;\n            switch (err.response?.status) {\n                case 400:\n                    return setErrorCode({\n                        open: true,\n                        code: err.response?.status,\n                        title: 'Mã xác thực không chính xác',\n                        loading: false\n                    })\n                case 501:\n                    return setErrorCode({\n                        open: true,\n                        code: err.response?.status,\n                        title: 'Mã xác thực không chính xác',\n                        loading: false\n                    })\n                default:\n                    break\n            }\n        }\n    }\n    const formikTelephone = useFormik({\n        initialValues: {\n            otp: \"\",\n            new_password: \"\",\n            confirm_password: \"\",\n        },\n        validationSchema: Yup.object({\n            otp: Yup.string()\n                .required(t(\"form.please_enter_your_verification_code\"))\n                .matches(/^[0-9]+$/, t(\"form.verification_invalid\"))\n                .min(6, t(\"form.verification_code_of_6_characters\"))\n                .max(6, t(\"form.verification_code_of_6_characters\")),\n            new_password: Yup.string()\n                .min(8, t(\"form.password_min\"))\n                .max(32, t(\"form.password_max\"))\n                .required(t(\"Home.Sign_val_password\")),\n            confirm_password: Yup.string()\n                .required(t(\"form.please_confirm_password\"))\n                .oneOf([Yup.ref(\"new_password\"), null], t(\"form.password_confirm_invalid\")),\n        }),\n        onSubmit: (values) => {\n            const params = {\n                telephone: `${data.telephone}`,\n                code: values.otp,\n                new_password: values.new_password,\n                verification_id: data.verification_id\n            }\n            handleOnResetPassword(params)\n        },\n    });\n    const onReSendOtp = () => {\n        handlePostTelephone(data.telephone, true);\n        setSec(90)\n    }\n\n    return (\n        <>\n            <DialogNotification\n                errorCode={errorCode}\n                setErrorCode={setErrorCode}\n            />\n            <div id=\"recaptcha-container\" ></div>\n            <div className=\"flex-row-sp for-pass-cnt__phone-head\">\n                <button\n                    onClick={() => setStep(1)}\n                >\n                    <img src={icon.chevronLeft} alt=\"\" />\n                </button>\n                <span>{t(\"form.reset_password\")}</span>\n                <div></div>\n            </div>\n            <div className=\"flex-column for-pass-cnt__phone-noti\">\n                <span>{t(\"form.send_your_code_text\")}</span>\n                <span>{data.telephone}</span>\n                <form\n                    autoComplete='off'\n                    className=\"flex-column for-pass-phone\"\n                    onSubmit={formikTelephone.handleSubmit}\n                >\n                    <input\n                        name=\"otp\"\n                        value={formikTelephone.values.otp}\n                        onChange={formikTelephone.handleChange}\n                        type=\"number\" pattern=\"[0-9]*\" inputMode=\"numeric\"\n                        style={{ textAlign: 'center' }}\n                        className=\"for-pass-cnt__phone-ip\"\n                        placeholder={t(\"form.verification_code\")}\n                    />\n                    {\n                        formikTelephone.errors.otp && formikTelephone.touched.otp &&\n                        <span className=\"for-pass-cnt__phone-err\">\n                            {formikTelephone.errors.otp}\n                        </span>\n                    }\n                    <input\n                        name=\"new_password\"\n                        value={formikTelephone.values.new_password}\n                        onChange={formikTelephone.handleChange}\n                        type=\"text\"\n                        style={{ textAlign: 'center' }}\n                        className=\"for-pass-cnt__phone-ip\"\n                        placeholder={t(\"Home.Sign_in_pl_password\")}\n                    />\n                    {\n                        formikTelephone.errors.new_password && formikTelephone.touched.new_password &&\n                        <span className=\"for-pass-cnt__phone-err\">\n                            {formikTelephone.errors.new_password}\n                        </span>\n                    }\n                    <input\n                        name=\"confirm_password\"\n                        value={formikTelephone.values.confirm_password}\n                        onChange={formikTelephone.handleChange}\n                        type=\"text\"\n                        style={{ textAlign: 'center' }}\n                        className=\"for-pass-cnt__phone-ip\"\n                        placeholder={t(\"form.confirm_password\")}\n                    />\n                    {\n                        formikTelephone.errors.confirm_password && formikTelephone.touched.confirm_password &&\n                        <span className=\"for-pass-cnt__phone-err\">\n                            {formikTelephone.errors.confirm_password}\n                        </span>\n                    }\n                    <div className=\"for-pass-cnt__time\">\n                        {\n                            sec > 0 ?\n                                <>{t(\"form.please_wait\")} <span>{sec}</span> {t(\"form.to_get_the_verification_code_back\")}</>\n                                :\n                                <span onClick={onReSendOtp} >{t(\"form.resend_code\")}</span>\n                        }\n                    </div>\n                    <button\n                        className='for-pass-cnt__btn'\n                        type='submit'\n                    >\n                        {\n                            errorCode.loading === true &&\n                            <div className=\"sign-loading\">\n                                <CircularProgress size=\"25px\" color=\"inherit\" />\n                            </div>\n                        }\n                        {t(\"form.continue\")}\n                    </button>\n                </form>\n            </div>\n        </>\n    );\n}\n\nexport default FormOtp;","\nimport { Container } from '@mui/material';\nimport img from '../../../constants/img';\nimport {useHistory} from 'react-router-dom'\nimport { useContext } from 'react';\nimport { AppContext } from '../../../context/AppProvider';\n\nfunction FormHead() {\n    const history = useHistory();\n    const {t} = useContext(AppContext);\n    return (\n        <div\n            className='for-head'\n        >\n            <Container>\n                <div className=\"flex-row-sp for-head-cnt\">\n                    <div className=\"flex-row for-head-cnt__left\">\n                        <img onClick={()=>history.push('/')} src={img.beautyX} alt=\"\" />\n                        <span className=\"text\">{t(\"form.reset_password\")}</span>\n                    </div>\n                    <div></div>\n                </div>\n            </Container>\n        </div>\n    );\n}\n\nexport default FormHead;","import React, { useState } from 'react';\nimport { Container } from '@mui/material';\nimport './style.css';\nimport FormTelephone from './components/FormTelephone';\nimport FormOtp from './components/FormOtp';\nimport { authentication, RecaptchaVerifier, signInWithPhoneNumber } from '../../firebase';\nimport FormHead from './components/FormHead';\n\ndeclare global {\n    interface Window {\n        recaptchaVerifier: any\n        confirmationResult: any\n        recaptchaWidgetId: any\n    }\n}\n\nexport const formatTelephone = (telephone: string) => {\n    return \"+84\" + telephone.toString().slice(1);\n}\nfunction ResetPassword() {\n    const [values, setValues] = useState({\n        telephone: '',\n        new_password: '',\n        code: '',\n        verification_id: ''\n    })\n    const [step, setStep] = useState(1)\n    const [load, setLoad] = useState(false);\n    //send otp\n    const generateRecaptcha = () => {\n        try {\n            // if (!window.recaptchaVerifier) {\n            //     window.recaptchaVerifier = new RecaptchaVerifier(\n            //         'recaptcha-container',\n            //         {\n            //             size: 'invisible',\n            //             callback: (value: any) => {\n            //             },\n            //             'expired-callback': () => {\n            //             },\n            //         },\n            //         authentication\n            //     )\n            // } else {\n            //     window.recaptchaVerifier.render()\n            // }\n            window.recaptchaVerifier = new RecaptchaVerifier(\n                'recaptcha-container',\n                {\n                    size: 'invisible',\n                    callback: (value: any) => {\n                    },\n                    'expired-callback': () => {\n                    },\n                },\n                authentication\n            )\n        } catch (err: any) {\n            console.log(err)\n        }\n    }\n    const handleSignWithPhone = async (phoneNumber: any, isRecaptcha: any, telephone: string) => {\n        try {\n            const result = await signInWithPhoneNumber(authentication, phoneNumber, window.recaptchaVerifier);\n            setValues({\n                ...values,\n                telephone: telephone,\n                verification_id: result?.verificationId\n            })\n            setStep(2)\n            console.log(result?.verificationId)\n            setLoad(false)\n        } catch (error) {\n            console.log(error)\n            setLoad(false)\n        }\n    }\n    const handlePostTelephone = (telephone: string, isRecaptcha: boolean) => {\n        setLoad(true)\n        const phoneNumber = formatTelephone(telephone)\n        if (phoneNumber === \"\") return;\n        isRecaptcha === true && generateRecaptcha()\n        handleSignWithPhone(phoneNumber, isRecaptcha, telephone);\n    }\n    const onSwitchStep = () => {\n        switch (step) {\n            case 1:\n                return <FormTelephone\n                    setValues={setValues}\n                    setStep={setStep}\n                    prevUrl={'/sign-in?1'}\n                    load={load}\n                    handlePostTelephone={handlePostTelephone}\n                />;\n            case 2:\n                return <FormOtp\n                    data={values}\n                    setStep={setStep}\n                    handlePostTelephone={handlePostTelephone}\n                />\n            default:\n                break;\n        }\n    }\n\n\n    return (\n        <>\n            <FormHead />\n            <Container>\n                <div\n                    className='for-pass-cnt'\n                >\n                    <div className=\"for-pass-cnt__phone\">\n                        {onSwitchStep()}\n                    </div>\n                </div>\n            </Container>\n        </>\n    );\n}\n\nexport default ResetPassword;"],"names":["props","t","useContext","AppContext","handlePostTelephone","title","load","isDialog","setActiveTabSign","prevUrl","history","useHistory","formikTelephone","useFormik","initialValues","telephone","validationSchema","Yup","required","onSubmit","values","cleanString","id","className","onClick","replace","goBack","src","icon","alt","autoComplete","handleSubmit","name","value","onChange","handleChange","type","placeholder","autoFocus","errors","touched","errorCode","setErrorCode","onBackSignIn","pathname","search","Dialog","open","onClose","code","onCheck","data","setStep","useState","loading","sec","setSec","useEffect","timeSec","setInterval","prevState","clearInterval","otp","new_password","confirm_password","matches","min","max","oneOf","async","authentication","params","error","err","response","status","handleOnResetPassword","verification_id","pattern","inputMode","style","textAlign","CircularProgress","size","color","Container","push","img","formatTelephone","toString","slice","setValues","step","setLoad","isRecaptcha","phoneNumber","window","recaptchaVerifier","RecaptchaVerifier","callback","console","log","generateRecaptcha","result","signInWithPhoneNumber","verificationId","handleSignWithPhone","FormTelephone","onSwitchStep"],"sourceRoot":""}