{"version":3,"file":"static/js/95.6f9e819c.chunk.js","mappings":"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","sources":["pages/Messenger/components/Right/index.tsx","webpack://web-booking/./src/pages/Messenger/message.module.css?9dc9","pages/Messenger/index.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { useLocation, useHistory, Link } from \"react-router-dom\"\nimport { IMessage, ITopic } from \"interface\"\nimport style from \"./right.module.css\"\nimport { XButton, XButtonFile } from \"components/Layout\"\nimport icon from \"constants/icon\"\nimport { checkMediaType, formatDateFromNow, linkify, onErrorAvatar, unique, uniqueArr } from \"utils\"\nimport { useAuth, useElementOnScreen, usePostMedia, useSwr, useSwrInfinite } from \"hooks\"\nimport InfiniteScroll from \"react-infinite-scroll-component\"\nimport { Dispatch, SetStateAction, useContext, useEffect, useRef, useState, KeyboardEvent, FC, ChangeEvent } from \"react\"\nimport { AppContext, AppContextType } from \"context\"\nimport API_ROUTE from \"api/_api\"\nimport { CACHE_TIME } from \"common\"\nimport moment from \"moment\"\nimport { chatApi } from \"api\"\nimport { Avatar, CircularProgress, Tooltip } from \"@mui/material\"\n\ninterface RightProps {\n  _id?: string;\n  topicProp?: ITopic;\n  moreBtn?: boolean\n}\n\nexport const Right: FC<RightProps> = ({ _id, topicProp, moreBtn }) => {\n  const { echo } = useContext(AppContext) as AppContextType\n  const { USER: user } = useAuth()\n  const location = useLocation()\n  const history = useHistory()\n  const topic_id = _id || location.pathname.split(\"/\")[2]\n  const topic: ITopic | undefined = topicProp || location.state\n  const botRef = useRef<HTMLDivElement>(null)\n  const onScrollBottom = () => {\n    if (botRef.current) {\n      botRef.current.scrollIntoView({ behavior: \"smooth\" })\n    }\n  }\n  const { response: org } = useSwr({\n    API_URL: API_ROUTE.ORG(topic?.organization_id ?? 0),\n    enable: topic?.organization_id,\n    dedupingInterval: CACHE_TIME\n  })\n  const users_name = unique(topic?.topic_user?.map(i => i.user?.fullname) ?? [])\n  let name = topic?.name\n  if (topic?.name?.trim().length === 0 || !topic?.name) {\n    name = users_name.join(\", \")\n  }\n  const { resData, onLoadMore, totalItem } = useSwrInfinite({\n    API_URL: \"messages\",\n    enable: user && topic_id,\n    keyPage: 'p',\n    params: {\n      l: 25,\n      sort: \"-created_at\",\n      topic_id\n    },\n    dedupingInterval: 0\n  })\n  const more = () => resData.length < totalItem && onLoadMore()\n  const isInScreen = useElementOnScreen({ rootMargin: '100px', threshold: 0.3 }, botRef)\n  const [msges, setMsges] = useState<IMessage[]>([])\n  const [isTyping, setIsTyping] = useState(false)\n  //[] handle messages\n  useEffect(() => {\n    if (echo && user && topic && org) {\n      let chat: any = echo.join(`ci.chat.${org.subdomain}.${topic_id}`)\n        .subscribed(() => {\n          chat.whisper('connected', {\n            user: {\n              id: user.id,\n              fullname: user.fullname,\n              avatar: user.avatar,\n              current_platform: 'MANAGER_WEB'\n            }, socketId: echo?.socketId()\n          })\n          chat.listenForWhisper('typing', (u: any) => {\n            // setIsTyping(u.user.id !== user.id && u?.user?.isTyping)\n            setIsTyping(u?.user?.isTyping)\n          })\n        })\n        .listen('MessagePosted', (u: IMessage) => {\n          if (user.id !== u.user_id) {\n            onScrollBottom()\n            setMsges(prev => {\n              if (prev.indexOf(u) === -1) {\n                return [u, ...prev]\n              }\n              return prev\n            })\n          }\n        }\n        )\n    }\n    return () => {\n      setMsges([])\n    }\n  }, [echo, topic_id, org])\n\n  return (\n    <div className={style.container}>\n      <div className={style.head}>\n        <div className={style.head_left}>\n          <XButton\n            onClick={() => history.goBack()}\n            className={style.head_left_back}\n            icon={icon.chevronRightBlack}\n          />\n          <div className={style.topic}>\n            <Avatar src={topic?.organization?.image_url} />\n            <div className={style.topic_name}>{name}</div>\n          </div>\n        </div>\n        <div className={style.head_right}>\n          {moreBtn && (\n            <Tooltip placement=\"top-end\" title=\"Xem tất cả đoạn chat\">\n              <div>\n                <Link\n                  className={style.head_right_btn}\n                  to={{ pathname: `/messages/${topic_id}` }}\n                >\n                  <img src={icon.menuWhite} alt=\"\" />\n                </Link>\n              </div>\n            </Tooltip>\n          )}\n        </div>\n      </div>\n      <div id=\"scrollableDiv\" className={style.messages}>\n        <div ref={botRef} className={style.bottom}></div>\n        <InfiniteScroll\n          dataLength={resData.length}\n          next={more}\n          style={{ display: \"flex\", flexDirection: \"column-reverse\" }}\n          inverse={true} //\n          hasMore={true}\n          loader={resData.length < totalItem && <Loader />}\n          scrollableTarget=\"scrollableDiv\"\n        >\n          {isTyping && <Typing />}\n          {uniqueArr(msges)\n            .concat(resData)\n            .map((item: IMessage, index) => (\n              <div key={index} className={style.message}>\n                <Message\n                  item={item}\n                  change={item.user_id === user.id}\n                  topicProp={topicProp}\n                  nameUser={name}\n                />\n              </div>\n            ))}\n          <div className={style.message_default}>\n            <div className={style.message_info_MC}>\n              <Avatar sx={{ width: 80, height: 80 }} src={topic?.organization?.image_url} />\n              <p className={style.message_info_name}>{name}</p>\n              <XButton>\n                <Link to={{ pathname: `/cua-hang/${topic?.organization?.subdomain || topic?.organization_id}` }}>\n                  Xem doanh nghiệp\n                </Link>\n              </XButton>\n            </div>\n            <div className={style.message_head}>\n              <div className={style.avatar}>\n                <img src={topic?.organization?.image_url} onError={onErrorAvatar} alt=\"\" />\n              </div>\n              <span className={style.user_name}>{name}</span>\n            </div>\n            <div className={style.message_body}>\n              <div\n                className={style.message_item_cnt}\n                style={{ alignItems: \"end\" }}\n              >\n                <p\n                  style={{\n                    backgroundColor: \"#f1faff\",\n                    borderRadius: \"8px 0px 8px 8px\",\n                  }}\n                  className={style.message_body_cnt}\n                >\n                  Xin chào {users_name && users_name}! {name} có thể hỗ trợ gì cho\n                  anh/chị?\n                </p>\n              </div>\n            </div>\n          </div>\n        </InfiniteScroll>\n      </div>\n      <InputChat\n        setMsges={setMsges}\n        topic_id={topic_id}\n        onScrollBottom={onScrollBottom}\n        isInScreen={isInScreen}\n        org={org}\n        moreBtn={moreBtn}\n      />\n    </div>\n  );\n}\nconst Message = ({ item, change = false, topicProp, nameUser }: { item: IMessage, change?: boolean, topicProp?: ITopic, nameUser: string | null | undefined }) => {\n  return (\n    <div className={style.message_cnt}>\n      <div\n        className={style.message_head}\n        style={change ? { flexDirection: \"row-reverse\" } : {}}\n      >\n        {!change && (\n          <>\n            <div className={style.avatar}>\n              <img\n                src={item.user?.avatar || \"\"}\n                onError={onErrorAvatar}\n                alt=\"\"\n              />\n            </div>\n            <span className={style.user_name}>{nameUser}</span>\n          </>\n        )}\n        <span className={style.create}>\n          {formatDateFromNow(item.created_at)}\n        </span>\n      </div>\n      <div\n        style={change ? { flexDirection: \"row-reverse\" } : {}}\n        className={style.message_body}\n      >\n        <div\n          className={style.message_item_cnt}\n          style={{ alignItems: change ? \"end\" : \"start\" }}\n        >\n          <div\n            style={\n              change\n                ? {\n                  backgroundColor: \"#f1faff\",\n                  borderRadius: \"8px 0px 8px 8px\",\n                }\n                : {}\n            }\n            className={style.message_body_cnt}\n            dangerouslySetInnerHTML={{ __html: linkify(item.msg) }}\n          />\n          {item.media_urls && item.media_urls?.length > 0 && (\n            <div\n              style={{\n                gridTemplateColumns: `repeat(${item.media_urls.length >= 3 ? 3 : item.media_urls.length\n                  }, 1fr)`,\n                width: `${topicProp ? \"18vw\" : \"33vw\"}`,\n              }}\n              className={style.message_body_images}\n            >\n              {item.media_urls.map((media_url) => (\n                <div key={media_url} className={style.message_body_images_item}>\n                  {\n                    checkMediaType(media_url) === \"IMAGE\" ?\n                      <img src={media_url} alt=\"\" />\n                      :\n                      <video controls>\n                        <source src={`${media_url}#t=0.1`} />\n                      </video>\n                  }\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\ninterface InputProps {\n  setMsges: Dispatch<SetStateAction<IMessage[]>>;\n  topic_id: string;\n  onScrollBottom: () => void;\n  isInScreen?: boolean;\n  org: any\n  moreBtn?: boolean\n}\nconst initMsg = {\n  _id: \"\",\n  msg: '',\n  user_id: 0,\n  topic_id: ``,\n  reply_id: null,\n  updated_at: '',\n  created_at: '',\n  medias: []\n}\nconst InputChat = ({ setMsges, topic_id, onScrollBottom, isInScreen, org, moreBtn }: InputProps) => {\n  const { USER: user } = useAuth()\n  const { handlePostMedia } = usePostMedia()\n  const [msg, setMsg] = useState<IMessage>(initMsg)\n  const textAreaRef = useRef<HTMLTextAreaElement>(null);\n  const { echo } = useContext(AppContext) as AppContextType\n  const onEmitTyping = (isTyping: boolean) => {\n    let chat: any = echo?.join(`ci.chat.${org.subdomain}.${topic_id}`)\n    chat?.whisper('typing', {\n      user: {\n        id: user.id,\n        fullname: user.fullname,\n        avatar: user.avatar,\n        isTyping: isTyping\n      }, socketId: echo?.socketId()\n    })\n  }\n  const resizeTextArea = () => {\n    if (textAreaRef.current) {\n      textAreaRef.current.style.height = \"auto\";\n      if (msg.msg.length > 0) {\n        textAreaRef.current.style.height =\n          textAreaRef.current.scrollHeight + \"px\";\n      }\n    }\n  };\n  useEffect(resizeTextArea, [msg]);\n  const onSubmit = async () => {\n    if (msg.msg.trim().length > 0 || msg.medias.length > 0) {\n      setMsges(prev => [{\n        ...msg,\n        _id: `${moment().format(\"YYYYMMDDHHmmss\")}${moment().milliseconds()}`,\n        user_id: user?.id,\n        created_at: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n        media_urls: msg.medias.map(i => i.original_url)\n      }, ...prev])\n      setMsg(initMsg)\n      await chatApi.postMessage({ msg: msg.msg, media_ids: msg.medias.map(i => i.model_id), topic_id })\n      textAreaRef.current?.blur()\n      onScrollBottom()\n    }\n  }\n  const handleKeyDown = (event: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.code === \"Enter\") {\n      event.preventDefault();\n      onSubmit()\n    }\n  }\n  const onChangeMedia = (e: ChangeEvent<HTMLInputElement>) => {\n    handlePostMedia({\n      e,\n      callBack: (data) => setMsg({ ...msg, medias: data })\n    })\n  }\n  return (\n    <div className={style.input_cnt}>\n      <XButton\n        icon={icon.chevronRightBlack}\n        className={!isInScreen ? `${style.scroll_btn} ${style.scroll_btn_act}` : style.scroll_btn}\n        onClick={onScrollBottom}\n      />\n      <div className={style.input_cnt_top}>\n        <div className={style.input_cnt_top_img}>\n          {\n            msg.medias?.map(img => (\n              <div key={img.original_url} className={style.input_img_item_cnt}>\n                <img className={style.img_item} src={img.original_url} alt=\"\" />\n                {\n                  img.model_id > 0 ?\n                    <XButton\n                      icon={icon.closeCircleWhite} iconSize={20}\n                      onClick={() => setMsg({ ...msg, medias: msg.medias.filter(i => i.model_id !== img.model_id) })}\n                    />\n                    :\n                    <div className={style.input_img_item_cnt_load}><CircularProgress size={22} /></div>\n                }\n              </div>\n            ))\n          }\n        </div>\n      </div>\n      <div className={style.input_cnt_bot}>\n        <div onClick={(e) => e.stopPropagation()} className={style.ip_ctl}>\n          <XButton className={style.ip_ctl_btn} iconSize={24} icon={icon.plus} />\n          {\n            !moreBtn &&\n            <XButtonFile\n              onChange={onChangeMedia} multiple iconSize={16}\n              icon={icon.imageWhite} className={style.ip_ctl_btn}\n            />\n          }\n        </div>\n        <div className={style.text_area_cnt}>\n          <textarea\n            ref={textAreaRef}\n            onChange={(e) => setMsg({ ...msg, msg: e.target.value })}\n            value={msg.msg}\n            placeholder=\"Aa\"\n            rows={1}\n            className={style.text_area}\n            onKeyDown={handleKeyDown}\n            onFocus={() => onEmitTyping(true)}\n            onBlur={() => onEmitTyping(false)}\n          />\n          <XButton\n            className={style.btn_send}\n            icon={(msg.msg.length > 0 || msg.medias.length > 0) ? icon.sendWhite : icon.thumbUpWhite}\n            iconSize={16}\n            onClick={onSubmit}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\nexport const Loader = () => {\n  return <div className={style.load}>Đang tải...<CircularProgress size={14} /></div>\n}\nconst Typing = () => {\n  return (\n    <div className={style.chatBubble}>\n      <div className={style.typing}>\n        <div className={style.dot} />\n        <div className={style.dot} />\n        <div className={style.dot} />\n      </div>\n    </div>\n  )\n}","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"message_container__AxLpV\",\"left\":\"message_left__k4A+R\",\"left_head\":\"message_left_head__T--mk\",\"left_head_top\":\"message_left_head_top__TNK6L\",\"left_head_txt\":\"message_left_head_txt__MsKN9\",\"left_head_bot\":\"message_left_head_bot__gwXBX\",\"left_body\":\"message_left_body__xLWq0\",\"topic\":\"message_topic__bGPa4\",\"topic_left_img\":\"message_topic_left_img__s85aR\",\"topic_left_online\":\"message_topic_left_online__7lGks\",\"topic_right\":\"message_topic_right__B9HX4\",\"topic_name\":\"message_topic_name__VZ3tS\",\"topic_message\":\"message_topic_message__Cxfkf\",\"right\":\"message_right__T+jke\",\"left_ch\":\"message_left_ch__pIzTj\",\"right_ch\":\"message_right_ch__Yr32q\"};","import { useAuth, useDebounce, useListenerRefresh, useSwrInfinite } from \"hooks\";\nimport { ITopic } from \"interface\";\nimport { paramsTopic } from \"params-query\";\nimport { useContext, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport { Loader } from \"./components\"\nimport style from \"./message.module.css\"\nimport icon from \"constants/icon\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { formatDateFromNow, onErrorAvatar, unique } from \"utils\";\nimport AuthRoute from \"route/AuthRoute\";\nimport { EmptyRes } from \"components/Layout\";\nimport { AppContext, AppContextType } from \"context\";\nimport { MessengerChat } from \"./components/Right/MessengerChat\";\n\nfunction Messenger() {\n  const { t } = useContext(AppContext) as AppContextType\n  const { USER } = useAuth()\n  const [query,] = useState(paramsTopic)\n  const location = useLocation()\n  const { onSetDebounceKeyword } = useDebounce()\n  const [keyword, setKeyword] = useState('')\n  const handleChangeSearch = (txt: string) => {\n    onSetDebounceKeyword({\n      text: txt,\n      callback: (text) => setKeyword(text)\n    })\n  }\n\n  const topic_id = location.pathname.split(\"/\")[2]\n  const { resData, onLoadMore, totalItem, isValidating, revalidate } = useSwrInfinite({\n    API_URL: \"topics\",\n    enable: USER,\n    params: Object.assign(query, { s: keyword }),\n    dedupingInterval: 0\n  })\n  const more = () => { if (resData.length < totalItem) { onLoadMore() } };\n  useListenerRefresh({\n    onListenerMsg: (msg) => {\n      revalidate();\n    }\n  })\n  return (\n    <div className={style.container}>\n      <div className={topic_id ? `${style.left} ${style.left_ch}` : style.left}>\n        <div className={style.left_head}>\n          <div className={style.left_head_top}>\n            <span className={style.left_head_txt}>Chat</span>\n            <div className={style.left_head_ctl}></div>\n          </div>\n          <div className={style.left_head_bot}>\n            <img src={icon.searchGray} alt=\"\" />\n            <input type=\"text\" placeholder=\"Tìm kiếm trong tin nhắn...\" onChange={e => handleChangeSearch(e.target.value)} />\n          </div>\n        </div>\n        <div className={style.left_body}>\n          {(!isValidating && resData.length === 0) && <EmptyRes isRecommend={false} title={t('Search_result.emty_message')} />}\n          <InfiniteScroll\n            hasMore={true}\n            height={`calc(100vh - 172px)`}\n            dataLength={resData.length}\n            loader={resData.length < totalItem && <Loader />}\n            next={more}\n          >\n            <ul className={style.topic_list}>\n              {\n                resData.map((item: ITopic) => (\n                  <li key={item._id} className={style.topic_cnt}>\n                    <Topic item={item} />\n                  </li>\n                ))\n              }\n            </ul>\n          </InfiniteScroll>\n        </div>\n      </div>\n      <Switch>\n        <AuthRoute>\n          <Route path=\"/messages/:_id\">\n            <div\n              style={{ backgroundColor: 'var(--white)' }}\n              className={topic_id ? `${style.right} ${style.right_ch}` : style.right}\n            >\n              <MessengerChat />\n            </div>\n          </Route>\n        </AuthRoute>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Messenger;\n\nconst Topic = ({ item }: { item: ITopic }) => {\n  const location = useLocation()\n  let name = item.name\n  if (item.name?.trim().length === 0 || !item.name) {\n    name = unique(item.topic_user?.map(i => i.user?.fullname).filter(Boolean)).join(\", \")\n  }\n  const topic_id = location.pathname.split(\"/\")[2]\n  return (\n    <Link\n      style={item._id === topic_id ? { backgroundColor: 'var(--bg-color)' } : {}}\n      to={{ pathname: `/messages/${item._id}`, state: item }}\n      className={style.topic}\n    >\n      <div className={style.topic_left}>\n        <div className={style.topic_left_img}>\n          <img src={item.organization?.image_url || ''} onError={onErrorAvatar} alt=\"\" />\n          <span className={style.topic_left_online}></span>\n        </div>\n      </div>\n      <div className={style.topic_right}>\n        <span className={style.topic_name}>\n          {item.organization?.name || name}\n        </span>\n        <div className={style.topic_message}>\n          <span>{item.messages[0]?.msg}</span>\n          <span>{formatDateFromNow(item.updated_at)}</span>\n        </div>\n      </div>\n    </Link>\n  )\n}"],"names":["Loader","_jsxs","className","style","load","children","_jsx","CircularProgress","size","t","useContext","AppContext","USER","useAuth","query","useState","paramsTopic","location","useLocation","onSetDebounceKeyword","useDebounce","keyword","setKeyword","topic_id","pathname","split","resData","onLoadMore","totalItem","isValidating","revalidate","useSwrInfinite","API_URL","enable","params","Object","assign","s","dedupingInterval","useListenerRefresh","onListenerMsg","msg","container","left","left_ch","left_head","left_head_top","left_head_txt","left_head_ctl","left_head_bot","src","icon","searchGray","alt","type","placeholder","onChange","e","handleChangeSearch","txt","target","value","text","callback","left_body","length","EmptyRes","isRecommend","title","InfiniteScroll","hasMore","height","dataLength","loader","next","more","topic_list","map","item","topic_cnt","Topic","_id","Switch","AuthRoute","Route","path","backgroundColor","right","right_ch","MessengerChat","_ref","_item$name","_item$organization","_item$organization2","_item$messages$","name","_item$topic_user","trim","unique","topic_user","i","_i$user","user","fullname","filter","Boolean","join","Link","to","state","topic","topic_left","topic_left_img","organization","image_url","onError","onErrorAvatar","topic_left_online","topic_right","topic_name","topic_message","messages","formatDateFromNow","updated_at"],"sourceRoot":""}