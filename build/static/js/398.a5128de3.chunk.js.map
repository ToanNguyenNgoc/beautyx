{"version":3,"file":"static/js/398.a5128de3.chunk.js","mappings":"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","sources":["webpack://web-booking/./src/pages/OtpMbPage/otp.module.css?5ee7","pages/OtpMbPage/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"body\":\"otp_body__UBHW1\",\"form_btn\":\"otp_form_btn__83+hr\",\"btn_send_telephone\":\"otp_btn_send_telephone__U+EHG\",\"container_title\":\"otp_container_title__-vf4-\"};","import React, { useContext, useState } from 'react';\nimport HeadMobile from 'features/HeadMobile';\nimport { authentication, signInWithPhoneNumber, RecaptchaVerifier } from \"../../firebase\";\nimport * as Yup from 'yup';\nimport style from './otp.module.css'\nimport { useFormik } from 'formik';\nimport { Input, XButton } from 'components/Layout';\nimport { AppContext } from 'context/AppProvider';\nimport { useNoti } from \"hooks\"\nimport { PopupNotification } from 'components/Notification';\nimport { useDispatch, useSelector } from 'react-redux';\nimport IStore from 'interface/IStore';\nimport { auth } from 'api/authApi'\nimport { putUser } from 'redux/user/userSlice';\nimport { AxiosError } from 'axios';\nimport { useHistory } from 'react-router-dom';\n\ndeclare global {\n    interface Window {\n        recaptchaVerifier: any;\n        confirmationResult: any;\n        recaptchaWidgetId: any;\n    }\n}\nwindow.confirmationResult = window.confirmationResult || {};\n\ninterface IData {\n    telephone: string,\n    code: string,\n    verification_id: string\n}\n\nfunction OtpMbPage() {\n    const [step, setStep] = useState(1)\n    const [data, setData] = useState({\n        telephone: '',\n        code: '',\n        verification_id: ''\n    })\n\n    return (\n        <>\n            <div className={style.body}>\n                {step === 1 && <FormTelephone\n                    data={data}\n                    setData={setData}\n                    step={step} setStep={setStep}\n                />}\n                {\n                    step === 2 &&\n                    <FormOtp\n                        data={data} setData={setData}\n                        step={step} setStep={setStep}\n                    />\n                }\n            </div>\n        </>\n    );\n}\n\nexport default OtpMbPage;\n\ninterface FormTelephoneProps {\n    data: IData,\n    setData: (data: IData) => void,\n    step: number, setStep: (step: number) => void\n}\n\nconst FormTelephone = (props: FormTelephoneProps) => {\n    const { data, setData, setStep } = props\n    const { t } = useContext(AppContext)\n    const { noti, firstLoad, resultLoad, onCloseNoti } = useNoti()\n    const generateRecaptcha = async () => {\n        try {\n            if (!window.recaptchaVerifier) {\n                window.recaptchaVerifier = new RecaptchaVerifier(\n                    'recaptcha-container',\n                    {\n                        size: 'invisible',\n                        callback: (value: any) => {\n                            // handleSubmit(value, true)\n                        },\n                        'expired-callback': () => {\n                            // Response expired. Ask user to solve reCAPTCHA again.\n                            // ...\n                        },\n                    },\n                    authentication\n                )\n            } else {\n                window.recaptchaVerifier.render();\n            }\n        } catch (err: any) {\n            console.log(err)\n        }\n    }\n    //handle form telephone\n    const handleSubmitTelephone = async (values: any) => {\n        firstLoad()\n        let phoneNumberVN = \"+84\" + values.telephone.toString().slice(1);\n        try {\n            const res = await signInWithPhoneNumber(authentication, phoneNumberVN, window.recaptchaVerifier)\n            setData({\n                ...data,\n                telephone: values.telephone,\n                verification_id: res.verificationId\n            })\n            resultLoad('', false)\n            setStep(2)\n        } catch (error) {\n            console.log(error);\n            let errorCode = error.code;\n            let messCode = error.message;\n            if (\n                errorCode === \"auth/quota-exceeded\" ||\n                errorCode === \"auth/too-many-requests\"\n            ) {\n                resultLoad('Số điện thoại đã đạt giới hạn cho phép gửi mã xác thực (OTP) trong ngày')\n            } else if (\n                messCode ===\n                \"reCAPTCHA has already been rendered in this element\"\n            ) {\n                resultLoad('Quá số lần nhận Otp tải lại trang để tiếp tục ...')\n            }\n            else {\n                resultLoad('Quá số lần nhận Otp tải lại trang để tiếp tục ..')\n            }\n        }\n    }\n    const formik = useFormik({\n        initialValues: {\n            telephone: data.telephone\n        },\n        validationSchema: Yup.object({\n            telephone: Yup.string()\n                .required(t(\"form.please_enter_your_phone\")),\n        }),\n        onSubmit: (values) => {\n            generateRecaptcha()\n            handleSubmitTelephone(values)\n        }\n    })\n    return (\n        <>\n            <HeadMobile\n                title='Cập nhật thông tin'\n            />\n            <div className={style.container}>\n                <div id=\"recaptcha-container\" ></div>\n                <form\n                    className={style.form_cnt}\n                    autoComplete=\"off\"\n                    onSubmit={formik.handleSubmit}\n                >\n                    <Input\n                        onChange={formik.handleChange}\n                        name=\"telephone\"\n                        value={formik.values.telephone}\n                        placeholder={t(\"pm.phone_number\")}\n                    />\n                    {\n                        formik.errors.telephone && formik.touched.telephone &&\n                        <span className=\"for-pass-cnt__phone-err\">\n                            {formik.errors.telephone}\n                        </span>\n                    }\n                    <div className={style.form_btn}>\n                        <XButton\n                            className={style.btn_send_telephone}\n                            title='Gửi mã xác nhận'\n                            type=\"submit\"\n                            loading={noti.load}\n                        />\n                    </div>\n                </form>\n                <PopupNotification\n                    open={noti.openAlert}\n                    setOpen={onCloseNoti}\n                    title='Thông báo'\n                    content={noti.message}\n                    children={\n                        <XButton\n                            title='Đã hiểu'\n                            onClick={onCloseNoti}\n                        />\n                    }\n                />\n            </div>\n        </>\n    )\n}\n\ninterface FormOtpProps {\n    data: IData, setData: (data: IData) => void,\n    step: number, setStep: (step: number) => void\n}\n\nconst FormOtp = (props: FormOtpProps) => {\n    const history = useHistory()\n    const dispatch = useDispatch();\n    const { data } = props;\n    const { noti, firstLoad, resultLoad, onCloseNoti } = useNoti()\n    const { USER } = useSelector((state: IStore) => state.USER)\n    const handleSubmit = async (values: any) => {\n        const params = {\n            ...data,\n            code: values.code\n        }\n        firstLoad()\n        try {\n            const res = await auth.putUserProfile(params)\n            if (res) {\n                dispatch(putUser({ ...USER, telephone: data.telephone }));\n                resultLoad(\n                    'Thay đổi thông tin thành công',\n                    true,\n                    <XButton\n                        title='Trở lại giỏ hàng'\n                        onClick={() => history.goBack()}\n                    />\n                )\n            }\n        } catch (error) {\n            const err = error as AxiosError;\n            switch (err.response?.status) {\n                case 301:\n                    return resultLoad('Số điện thoại đã tồn tại');\n                case 502:\n                    return resultLoad('Lỗi hệ thống gửi sms quý khách vui lòng thử lại sau!')\n                default:\n                    return resultLoad('Đã có lỗi xảy ra vui lòng thử lại sau!')\n            }\n        }\n\n    }\n    const formik = useFormik({\n        initialValues: { code: '' },\n        validationSchema: Yup.object({\n            code: Yup.string()\n                .required('Vui lòng nhập mã OTP'),\n        }),\n        onSubmit: (values) => {\n            handleSubmit(values)\n        }\n    })\n    return (\n        <>\n            <HeadMobile\n                title='Nhập mã OTP'\n                onBack={() => window.location.reload()}\n            />\n            <div className={style.container}>\n                <div className={style.container_title}>\n                    Mã OTP đã được gửi đến số điện thoại <h4>{data.telephone}</h4>\n                </div>\n                <form\n                    className={style.form_cnt}\n                    autoComplete=\"off\"\n                    onSubmit={formik.handleSubmit}\n                >\n                    <Input\n                        onChange={formik.handleChange}\n                        name=\"code\"\n                        value={formik.values.code}\n                        placeholder={'Nhập mã OTP'}\n                    />\n                    {\n                        formik.errors.code && formik.touched.code &&\n                        <span className=\"for-pass-cnt__phone-err\">\n                            {formik.errors.code}\n                        </span>\n                    }\n                    <div className={style.form_btn}>\n                        <XButton\n                            className={style.btn_send_telephone}\n                            title='Cập nhật'\n                            type=\"submit\"\n                        />\n                    </div>\n                </form>\n                <PopupNotification\n                    title='Thông báo'\n                    content={noti.message}\n                    open={noti.openAlert}\n                    setOpen={onCloseNoti}\n                    children={noti.child}\n                />\n            </div>\n        </>\n    )\n}"],"names":["window","confirmationResult","step","setStep","useState","data","setData","telephone","code","verification_id","className","style","FormTelephone","FormOtp","props","t","useContext","AppContext","noti","firstLoad","resultLoad","onCloseNoti","useNoti","formik","useFormik","initialValues","validationSchema","Yup","required","onSubmit","values","async","recaptchaVerifier","render","RecaptchaVerifier","size","callback","value","authentication","err","console","log","generateRecaptcha","phoneNumberVN","toString","slice","res","signInWithPhoneNumber","verificationId","error","errorCode","messCode","message","handleSubmitTelephone","HeadMobile","title","id","autoComplete","handleSubmit","onChange","handleChange","name","placeholder","errors","touched","type","loading","load","open","openAlert","setOpen","content","children","onClick","history","useHistory","dispatch","useDispatch","USER","useSelector","state","params","auth","putUser","goBack","response","status","onBack","location","reload","child"],"sourceRoot":""}